[{"/Users/justin.lee/Desktop/justxn-pomodoro/src/reportWebVitals.js":"1","/Users/justin.lee/Desktop/justxn-pomodoro/src/App.js":"2","/Users/justin.lee/Desktop/justxn-pomodoro/src/index.js":"3","/Users/justin.lee/Desktop/justxn-pomodoro/src/components/Timer.js":"4"},{"size":362,"mtime":1611971858514,"results":"5","hashOfConfig":"6"},{"size":1433,"mtime":1612089281275,"results":"7","hashOfConfig":"6"},{"size":585,"mtime":1612089297936,"results":"8","hashOfConfig":"6"},{"size":4132,"mtime":1612089267956,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"54w4oc",{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"/Users/justin.lee/Desktop/justxn-pomodoro/src/reportWebVitals.js",[],"/Users/justin.lee/Desktop/justxn-pomodoro/src/App.js",["19","20"],"/Users/justin.lee/Desktop/justxn-pomodoro/src/index.js",["21","22","23"],"/Users/justin.lee/Desktop/justxn-pomodoro/src/components/Timer.js",["24","25","26"],"import React, { useState, useEffect } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\n\nconst end = new Date()\n\nconst Timer = ({ workDuration, shortBreak, longBreak, numberOfSessions}) => {\n  var duration = workDuration // 25 Minutes(s) Default\n  const SHORTBREAK = shortBreak\n  const LONGBREAK = longBreak\n  const WORK = workDuration\n  useEffect(() => {\n    end.setTime(Date.now() + duration * 60000)\n  },[]);\n  const [totalSeconds, setTotalSeconds] = useState(duration * 60)\n  const [progress, setProgress] = useState(0)\n  const [sessions, setSessions] = useState(1) // Number of sessions finished\n  const [beginInterval, setBeginInterval] = useState(false) // Ensures that timer doesn't go on to the next timer\n  const [totalSessions, setTotalSessions] = useState(numberOfSessions)\n  const [mode, setMode] = useState(0) // 0 durationing, 1 short break, 2 long\n  const [minutes, setMinutes] = useState(duration)\n  const [seconds, setSeconds] = useState(totalSeconds % 60)\n  const [color, setColor] = useState('primary')\n  const [isComplete, setIsComplete] = useState(false)\n\n  useEffect(() => {\n    setBeginInterval(true);\n    const timer = setTimeout(updateElapsedTime, 1000);\n    if (isComplete) {\n      clearTimeout(timer);\n    }\n  });\n\n  const calculateElapsedTime = (startTime, endTime) => {\n    return Math.abs(endTime - startTime)\n  }\n\n  const updateElapsedTime = () => {\n    const remainingTime = calculateElapsedTime(Date.now(), end)\n    setProgress(totalSeconds - Math.floor(remainingTime / 1000))\n    setSeconds(Math.floor((remainingTime / 1000) % 60))\n    setMinutes(Math.floor((remainingTime / 60000)))\n\n    if (beginInterval) {\n      // Times up!\n      \n      if (sessions === totalSessions) {\n        setIsComplete(true);\n      }\n      else if (progress === totalSeconds) {\n        setProgress(0)\n        switch (mode) {\n          // End duration\n          case 0:\n            duration = SHORTBREAK\n            setColor('secondary')\n            setMode(1)\n            if (sessions % 4 === 0 && sessions !== 0) {\n              setColor('secondary')\n              duration = LONGBREAK\n              setMode(2)\n            }\n            break;\n          // End Short break\n          case 1:\n            duration = WORK\n            setSessions(sessions + 1)\n            setColor('primary')\n            setMode(0)\n            break;\n          // Long break\n          case 2:\n            duration = WORK\n            setSessions(sessions + 1)\n            setColor('primary')\n            setMode(0)\n            break;\n          default:\n        }\n        setBeginInterval(false)\n        setTotalSeconds(WORK * 60)\n        end.setTime(Date.now() + WORK * 60000)\n      }\n    }\n  }\n\n  return (\n    <Box size = \"500px\" position=\"relative\" display=\"inline-flex\">\n      <CircularProgress size=\"550px\" variant=\"determinate\" color={isComplete ? 'secondary' : color} value={ isComplete ? 100 : ((totalSeconds - progress) / totalSeconds) * 100} />\n      <Box\n        top={0}\n        left={0}\n        bottom={0}\n        right={0}\n        position=\"absolute\"\n        display={isComplete ? 'none' : 'flex'}\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <div>\n          <Typography color=\"initial\" variant=\"h1\">\n            {minutes}:{seconds === 0 || seconds < 10 ? \"0\" + seconds : seconds}\n          </Typography>\n          <Typography color=\"initial\" variant=\"h2\">\n            {sessions}/{totalSessions}\n          </Typography>\n        </div>\n      </Box>\n      <Box\n        top={0}\n        left={0}\n        bottom={0}\n        right={0}\n        position=\"absolute\"\n        display={isComplete ? 'flex' : 'none'}\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <div>\n          <Typography color=\"initial\" variant=\"h2\">\n            Completed\n          </Typography>\n          <Typography color=\"initial\" variant=\"h1\">\n            {sessions}/{totalSessions}\n          </Typography>\n        </div>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Timer;",{"ruleId":"27","severity":1,"message":"28","line":1,"column":8,"nodeType":"29","messageId":"30","endLine":1,"endColumn":12},{"ruleId":"27","severity":1,"message":"31","line":8,"column":3,"nodeType":"29","messageId":"30","endLine":8,"endColumn":14},{"ruleId":"27","severity":1,"message":"32","line":7,"column":20,"nodeType":"29","messageId":"30","endLine":7,"endColumn":26},{"ruleId":"27","severity":1,"message":"33","line":8,"column":3,"nodeType":"29","messageId":"30","endLine":8,"endColumn":7},{"ruleId":"27","severity":1,"message":"31","line":9,"column":3,"nodeType":"29","messageId":"30","endLine":9,"endColumn":14},{"ruleId":"34","severity":1,"message":"35","line":15,"column":5,"nodeType":"36","endLine":15,"endColumn":7,"suggestions":"37"},{"ruleId":"27","severity":1,"message":"38","line":20,"column":25,"nodeType":"29","messageId":"30","endLine":20,"endColumn":41},{"ruleId":"34","severity":1,"message":"39","line":27,"column":3,"nodeType":"29","endLine":27,"endColumn":12,"suggestions":"40"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useLocation' is defined but never used.","'Router' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'duration'. Either include it or remove the dependency array.","ArrayExpression",["41"],"'setTotalSessions' is assigned a value but never used.","React Hook useEffect contains a call to 'setBeginInterval'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [updateElapsedTime, isComplete] as a second argument to the useEffect Hook.",["42"],{"desc":"43","fix":"44"},{"desc":"45","fix":"46"},"Update the dependencies array to be: [duration]",{"range":"47","text":"48"},"Add dependencies array: [updateElapsedTime, isComplete]",{"range":"49","text":"50"},[534,536],"[duration]",[1366,1366],", [updateElapsedTime, isComplete]"]